<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Zero-Point Reactor</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
   
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Rajdhani:wght@500;700&display=swap" rel="stylesheet">
    <style>
    body {
    background-color: #1a1c20;
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 100vh;
    font-family: 'Rajdhani', sans-serif;
    color: #e0e0e0;
}

:root {
    --glow-color: #03a9f4; /* Blue glow for stable state */
}

.reactor-container {
    background: #28313e;
    padding: 30px;
    border-radius: 12px;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
    width: 100%;
    max-width: 380px;
    text-align: center;
    border-top: 2px solid var(--glow-color);
    transition: border-top-color 0.5s ease;
}

.reactor-title {
    margin-bottom: 20px;
    color: #ffffff;
    font-weight: 700;
    letter-spacing: 3px;
    text-transform: uppercase;
}

.core-display {
    margin: 30px 0;
}

.ignite-btn {
    width: 80%;
    padding: 20px;
    background: #1e252f;
    border: 2px solid var(--glow-color);
    color: white;
    font-size: 24px;
    font-weight: 700;
    letter-spacing: 2px;
    cursor: pointer;
    border-radius: 5px;
    box-shadow: 0 0 15px var(--glow-color), 0 0 10px var(--glow-color) inset;
    transition: all 0.3s ease;
    clip-path: polygon(0 10px, 10px 0, 100% 0, 100% calc(100% - 10px), calc(100% - 10px) 100%, 0 100%);
}

.ignite-btn:hover {
    box-shadow: 0 0 25px var(--glow-color), 0 0 15px var(--glow-color) inset;
}

.ignite-btn:disabled {
    cursor: not-allowed;
    background: #333;
    color: #777;
    border-color: #666;
    box-shadow: none;
}

.toggles-container {
    display: flex;
    flex-direction: column;
    gap: 15px;
    margin-bottom: 25px;
}

.toggle-wrapper {
    display: flex;
    justify-content: space-between;
    align-items: center;
    background: rgba(0,0,0,0.2);
    padding: 10px 15px;
    border-radius: 6px;
}

.toggle-label {
    font-size: 16px;
    font-weight: 500;
    color: #ccc;
}

/* The switch - a checkbox-based toggle */
.switch {
    position: relative;
    display: inline-block;
    width: 50px;
    height: 24px;
}
.switch input { 
    opacity: 0;
    width: 0;
    height: 0;
}
.slider {
    position: absolute;
    cursor: pointer;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: #4a5568;
    transition: .4s;
    border-radius: 24px;
}
.slider:before {
    position: absolute;
    content: "";
    height: 18px;
    width: 18px;
    left: 3px;
    bottom: 3px;
    background-color: white;
    transition: .4s;
    border-radius: 50%;
}
input:checked + .slider {
    background-color: #03a9f4;
}
input:checked + .slider:before {
    transform: translateX(26px);
}

.status-panel {
    background: #1e252f;
    border: 1px solid #444;
    border-radius: 4px;
    padding: 12px;
    min-height: 50px;
}

#statusText {
    margin: 0;
    color: #00ffc3; /* A nice "terminal green" color */
    font-weight: 500;
}
    </style>
</head>
<body>

    <div class="reactor-container">
        <h2 class="reactor-title">Zero-Point Reactor</h2>

        <div class="core-display">
            <button id="igniteBtn" class="ignite-btn">IGNITE</button>
        </div>

        <div class="toggles-container">
            <div class="toggle-wrapper">
                <label for="containmentToggle" class="toggle-label">Containment Field</label>
                <label class="switch">
                    <input type="checkbox" id="containmentToggle" checked>
                    <span class="slider"></span>
                </label>
            </div>
            <div class="toggle-wrapper">
                <label for="coolantToggle" class="toggle-label">Coolant Flow</label>
                <label class="switch">
                    <input type="checkbox" id="coolantToggle" checked>
                    <span class="slider"></span>
                </label>
            </div>
            <div class="toggle-wrapper">
                <label for="plasmaToggle" class="toggle-label">Plasma Injector</label>
                <label class="switch">
                    <input type="checkbox" id="plasmaToggle" checked>
                    <span class="slider"></span>
                </label>
            </div>
        </div>
        
        <div class="status-panel">
            <p id="statusText">STATUS: All systems nominal. Awaiting ignition.</p>
        </div>
    </div>

    <script>
    document.addEventListener('DOMContentLoaded', () => {
    const igniteBtn = document.getElementById('igniteBtn');
    const statusText = document.getElementById('statusText');
    const container = document.querySelector('.reactor-container');

    const toggles = {
        containment: document.getElementById('containmentToggle'),
        coolant: document.getElementById('coolantToggle'),
        plasma: document.getElementById('plasmaToggle'),
    };

    const updateReactorState = () => {
        const isContainmentOn = toggles.containment.checked;
        const isCoolantOn = toggles.coolant.checked;
        
        // Critical safety checks
        if (!isContainmentOn) {
            igniteBtn.disabled = true;
            statusText.textContent = 'CRITICAL: Containment field offline!';
            setGlowColor('#ff4141'); // Red alert
        } else if (!isCoolantOn) {
            igniteBtn.disabled = false;
            statusText.textContent = 'WARNING: Coolant systems disengaged.';
            setGlowColor('#ffb241'); // Orange warning
        } else {
            igniteBtn.disabled = false;
            statusText.textContent = 'STATUS: All systems nominal. Awaiting ignition.';
            setGlowColor('#03a9f4'); // Blue stable
        }
    };

    const setGlowColor = (color) => {
        document.documentElement.style.setProperty('--glow-color', color);
    };

    // Add event listeners to all toggles
    Object.values(toggles).forEach(toggle => {
        toggle.addEventListener('change', updateReactorState);
    });

    // Handle ignition
    igniteBtn.addEventListener('click', () => {
        igniteBtn.textContent = 'IGNITING...';
        igniteBtn.disabled = true;
        
        let finalMessage = "Zero-Point Energy Output: Stable.";
        if (!toggles.coolant.checked) {
            finalMessage = "Core temperature rising... Output unstable.";
        }
        if (toggles.plasma.checked) {
            finalMessage += " Plasma injection maximized.";
        }

        setTimeout(() => {
            statusText.textContent = finalMessage;
            igniteBtn.textContent = 'IGNITE';
            updateReactorState(); // Re-check state and re-enable button if safe
        }, 2000);
    });

    // Initial check on load
    updateReactorState();
});
    </script>
</body>
</html>